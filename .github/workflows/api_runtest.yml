name: Automated API tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  api-test-job:
    name: Run API Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Prepare test results folder
      run: |
        echo "Create folder for tests..."
        mkdir -p ./api/test_results/

    - name: Run API Tests
      run: |
        echo "🏁 Run API Test..."
        pytest tests/api/ --tb=short --maxfail=10 -q > ./api/test_results/report.txt || true
        echo "✅ API test finished"

    - name: Save test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-test-report
        path: ./api/test_results/
        retention-days: 7

  publish-report:
    name: Publish Test Report
    runs-on: ubuntu-latest
    needs: api-test-job

    steps:
    - name: Download test report artifact
      uses: actions/download-artifact@v4
      with:
        name: api-test-report
        path: ./api/test_results/

    - name: Show raw test report
      run: |
        echo "📄 Raw test output:"
        cat ./api/test_results/report.txt || echo "⚠️ Report file not found"

    - name: Generate summary from report
      run: |
        echo "🎯 **Test Execution Summary**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        STATS_LINE=$(tail -n 10 ./api/test_results/report.txt | grep -E '==.* in .*s' || echo "")
        echo "ℹ️ Found stats line: $STATS_LINE"

        if [ -z "$STATS_LINE" ]; then
          echo "❌ No summary line found in report" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Statistics**" >> $GITHUB_STEP_SUMMARY
          echo "Total Tests: 0" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed: 0" >> $GITHUB_STEP_SUMMARY
          echo "❌ Failed: 0" >> $GITHUB_STEP_SUMMARY
          echo "⏭️ Skipped: 0" >> $GITHUB_STEP_SUMMARY
          echo "📈 Pass Rate: 0.00%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ No failed tests" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        TOTAL=$(echo "$STATS_LINE" | grep -oP '\d+(?= (passed|failed|skipped))' | paste -sd+ - | bc)
        PASSED=$(echo "$STATS_LINE" | grep -oP '\d+(?= passed)' || echo 0)
        FAILED=$(echo "$STATS_LINE" | grep -oP '\d+(?= failed)' || echo 0)
        SKIPPED=$(echo "$STATS_LINE" | grep -oP '\d+(?= skipped)' || echo 0)

        if [ -z "$TOTAL" ] || [ "$TOTAL" -eq 0 ]; then
          PASS_RATE="0.00"
        else
          PASS_RATE=$(awk "BEGIN {printf \"%.2f\", ($PASSED*100)/$TOTAL}")
        fi

        echo "📊 **Statistics**" >> $GITHUB_STEP_SUMMARY
        echo "Total Tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
        echo "✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
        echo "❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
        echo "⏭️ Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
        echo "📈 Pass Rate: $PASS_RATE%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "❌ **Failed Tests:**" >> $GITHUB_STEP_SUMMARY
        grep -E "FAILED\s+api/" ./api/test_results/report.txt | cut -d" " -f2 >> $GITHUB_STEP_SUMMARY || echo "✅ No failed tests" >> $GITHUB_STEP_SUMMARY
