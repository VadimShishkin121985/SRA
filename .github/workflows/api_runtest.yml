name: Automated API tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  api-test-job:
    name: Run API Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Prepare test results folder
      run: |
        echo "Create folder for tests..."
        mkdir -p ./api/test_results/

    - name: Run API Tests and save output
      run: |
        echo "üèÅ Running API tests..."
        mkdir -p ./api/test_results/

        # –ó–∞–ø—É—Å–∫ pytest, –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        pytest tests/api/ --tb=short -v | tee ./api/test_results/report.txt | grep -E "tests/api/.* (PASSED|FAILED|SKIPPED)"

        echo "‚úÖ API test run complete"

    - name: Save test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-test-report
        path: ./api/test_results/
        retention-days: 7

  publish-report:
    name: Publish Test Report
    runs-on: ubuntu-latest
    needs: api-test-job

    steps:
    - name: Download test report artifact
      uses: actions/download-artifact@v4
      with:
        name: api-test-report
        path: ./api/test_results/

    - name: Show raw test report
      run: |
        echo "üìÑ Raw test output:"
        cat ./api/test_results/report.txt || echo "‚ö†Ô∏è Report file not found"

    - name: Generate summary from report
      run: |
        echo "üéØ **Test Execution Summary**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        STATS_LINE=$(tail -n 10 ./api/test_results/report.txt | grep -E '==.* in .*s' || echo "")
        echo "‚ÑπÔ∏è Found stats line: $STATS_LINE"

        if [ -z "$STATS_LINE" ]; then
          echo "‚ùå No summary line found in report" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Statistics**" >> $GITHUB_STEP_SUMMARY
          echo "Total Tests: 0" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Passed: 0" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Failed: 0" >> $GITHUB_STEP_SUMMARY
          echo "‚è≠Ô∏è Skipped: 0" >> $GITHUB_STEP_SUMMARY
          echo "üìà Pass Rate: 0.00%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ No failed tests" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        TOTAL=$(echo "$STATS_LINE" | grep -oP '\\d+(?= (passed|failed|skipped))' | paste -sd+ - | bc)
        PASSED=$(echo "$STATS_LINE" | grep -oP '\\d+(?= passed)' || echo 0)
        FAILED=$(echo "$STATS_LINE" | grep -oP '\\d+(?= failed)' || echo 0)
        SKIPPED=$(echo "$STATS_LINE" | grep -oP '\\d+(?= skipped)' || echo 0)

        if [ -z "$TOTAL" ] || [ "$TOTAL" -eq 0 ]; then
          PASS_RATE="0.00"
        else
          PASS_RATE=$(awk "BEGIN {printf \"%.2f\", ($PASSED*100)/$TOTAL}")
        fi

        echo "üìä **Statistics**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Total Tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
        echo "‚ùå Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
        echo "‚è≠Ô∏è Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
        echo "üìà Pass Rate: $PASS_RATE%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "‚ùå **Failed Tests:**" >> $GITHUB_STEP_SUMMARY
        grep -E "FAILED\\s+api/" ./api/test_results/report.txt | cut -d" " -f2 >> $GITHUB_STEP_SUMMARY || echo "‚úÖ No failed tests" >> $GITHUB_STEP_SUMMARY

    - name: Send API test summary to Telegram
      if: always()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_SRA_ID: ${{ secrets.TELEGRAM_CHAT_SRA_ID }}
      run: |
        echo "üì§ Sending API test summary to Telegram..."

        STATS_LINE=$(tail -n 10 ./api/test_results/report.txt | grep -E '==.* in .*s' || true)
        TOTAL=$(echo "$STATS_LINE" | grep -oP '\\d+(?= (passed|failed|skipped))' | paste -sd+ - | bc || echo 0)
        PASSED=$(echo "$STATS_LINE" | grep -oP '\\d+(?= passed)' || echo 0)
        FAILED=$(echo "$STATS_LINE" | grep -oP '\\d+(?= failed)' || echo 0)
        SKIPPED=$(echo "$STATS_LINE" | grep -oP '\\d+(?= skipped)' || echo 0)

        if [ "$TOTAL" -eq 0 ]; then
          PASS_RATE="0.00"
        else
          PASS_RATE=$(awk "BEGIN {printf \"%.2f\", ($PASSED*100)/$TOTAL}")
        fi

        FAILED_TESTS=$(grep -E "FAILED\\s+tests/api/" ./api/test_results/report.txt | cut -d' ' -f1 || true)

        BUILD_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

        MESSAGE="\U0001F4E1 *API Test Summary*\n\n*Total:* $TOTAL\n‚úÖ *Passed:* $PASSED\n‚ùå *Failed:* $FAILED\n‚è≠Ô∏è *Skipped:* $SKIPPED\n\U0001F4C8 *Pass Rate:* ${PASS_RATE}%%"

        if [ -n "$FAILED_TESTS" ]; then
          MESSAGE="$MESSAGE\n\n‚ùå *Failed Tests:*"
          while read -r test; do
            MESSAGE="$MESSAGE\n- \`$test\`"
          done <<< "$FAILED_TESTS"
        fi

        MESSAGE="$MESSAGE\n\n\U0001F517 [View Build Log]($BUILD_URL)"

        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
          -d chat_id=$TELEGRAM_CHAT_SRA_ID \
          -d parse_mode=Markdown \
          --data-urlencode text="$MESSAGE"
