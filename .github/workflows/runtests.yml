name: Automated tests

on:
  push

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  download-history:
    # if: false
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download artifacts
        run: >
          ARTIFACT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=allure-results" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$ARTIFACT_ID/zip 
          -o artifacts.zip &&
          REPORT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=github-pages" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$REPORT_ID/zip 
          -o pages.zip

      - name: Extract artifacts
        run: |
          mkdir -p allure-results pages_history
          unzip -q artifacts.zip -d allure-results || true
          unzip -q pages.zip -d pages_history || true
          if [ -f pages_history/artifact.tar ]; then
            tar -xf pages_history/artifact.tar -C pages_history
          fi

      - name: Copy history
        run: |
          if [ -d "pages_history/history" ]; then
            mkdir -p allure-results/history
            cp -r pages_history/history/* allure-results/history/ || true
          fi

      - name: Store allure history
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 5

  test:
    needs: download-history
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable
        
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download history
        uses: actions/download-artifact@v3
        with:
          name: allure-history
          path: allure-results
        continue-on-error: true

      - name: Run tests
        run: |
          pytest --maxfail=3 --disable-warnings -v --alluredir=allure-results
        continue-on-error: true

      - name: Store allure results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 1

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate report
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft' # See 'Supported distributions' for available options
          java-version: '17'
      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Generate Report
        run: |
          cp -r allure-results/history/* allure-results/ || true
          allure generate allure-results -o _site --clean
          cp -r allure-results/history _site/history || true

      - name: Generate Test Summary
        run: |
          echo "# 🎯 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Statistics" >> $GITHUB_STEP_SUMMARY
          
          # Подсчет общего количества тестов
          TOTAL=$(find allure-results -name "*.json" ! -name 'history-trend.json' ! -name 'categories-trend.json' ! -name 'duration-trend.json' ! -name 'retry-trend.json' | wc -l)
          
          # Подсчет успешных тестов
          PASSED=$(grep -l '"status":"passed"' allure-results/*.json | wc -l)
          
          # Подсчет упавших тестов
          FAILED=$(grep -l '"status":"failed"' allure-results/*.json | wc -l)
          
          # Подсчет пропущенных тестов
          SKIPPED=$(grep -l '"status":"skipped"' allure-results/*.json | wc -l)
          
          # Подсчет процента успешных тестов
          PASS_RATE=$(awk "BEGIN { print ($PASSED/$TOTAL) * 100 }")
          
          echo "### Overall Results" >> $GITHUB_STEP_SUMMARY
          echo "- Total Tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Pass Rate: ${PASS_RATE}%" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find allure-results -name "*.json" ! -name 'history-trend.json' ! -name 'categories-trend.json' ! -name 'duration-trend.json' ! -name 'retry-trend.json' -exec grep -l '"name":' {} \; | sort | while read -r file; do
            suite_name=$(grep '"name":' "$file" | head -1 | cut -d'"' -f4)
            status=$(grep '"status":' "$file" | head -1 | cut -d'"' -f4)
            case $status in
              "passed") icon="✅";;
              "failed") icon="❌";;
              "skipped") icon="⏭️";;
              *) icon="❓";;
            esac
            echo "$icon $suite_name" >> $GITHUB_STEP_SUMMARY
          done
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "### Duration" >> $GITHUB_STEP_SUMMARY
          total_duration=$(grep -h '"duration":' allure-results/*.json | awk '{sum += $2} END {print sum/1000}')
          echo "⏱️ Total execution time: ${total_duration}s" >> $GITHUB_STEP_SUMMARY

          # Добавляем визуальный прогресс-бар
          total_width=50
          passed_width=$(( ($PASSED * $total_width) / $TOTAL ))
          failed_width=$(( ($FAILED * $total_width) / $TOTAL ))
          skipped_width=$(( ($SKIPPED * $total_width) / $TOTAL ))
          
          echo "### Test Results Distribution" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          printf "Passed  [%${passed_width}s%$((total_width-passed_width))s] %d%%\n" "$(printf '#%.0s' $(seq 1 $passed_width))" "" $(($PASSED * 100 / $TOTAL)) >> $GITHUB_STEP_SUMMARY
          printf "Failed  [%${failed_width}s%$((total_width-failed_width))s] %d%%\n" "$(printf '#%.0s' $(seq 1 $failed_width))" "" $(($FAILED * 100 / $TOTAL)) >> $GITHUB_STEP_SUMMARY
          printf "Skipped [%${skipped_width}s%$((total_width-skipped_width))s] %d%%\n" "$(printf '#%.0s' $(seq 1 $skipped_width))" "" $(($SKIPPED * 100 / $TOTAL)) >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Добавляем временную диаграмму
          echo "### Test Duration Distribution" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Duration per test (seconds):" >> $GITHUB_STEP_SUMMARY
          for file in allure-results/*.json; do
            if [[ $file != *"trend.json" ]]; then
              name=$(grep '"name":' "$file" | head -1 | cut -d'"' -f4)
              duration=$(grep '"duration":' "$file" | head -1 | awk '{print $2/1000}')
              printf "%-30s %8.2f |%s\n" "$name" "$duration" "$(printf '#%.0s' $(seq 1 $(echo "$duration/0.5" | bc)))" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Добавляем круговую диаграмму ASCII
          echo "### Test Results Pie Chart" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "     .------------------." >> $GITHUB_STEP_SUMMARY
          echo "    /  Passed ($PASSED)     \\" >> $GITHUB_STEP_SUMMARY
          echo "   /       ########         \\" >> $GITHUB_STEP_SUMMARY
          echo "  |      ##########         |" >> $GITHUB_STEP_SUMMARY
          echo "  |    ############     ($FAILED) Failed" >> $GITHUB_STEP_SUMMARY
          echo "  |  ##############         |" >> $GITHUB_STEP_SUMMARY
          echo "   \\     ########     ($SKIPPED) /" >> $GITHUB_STEP_SUMMARY
          echo "    \\     Skipped        /" >> $GITHUB_STEP_SUMMARY
          echo "     '------------------'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Добавляем тренд выполнения
          echo "### Test Execution Trend" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Last 5 runs:" >> $GITHUB_STEP_SUMMARY
          echo "Today     $(printf '#%.0s' $(seq 1 $PASSED))$(printf 'x%.0s' $(seq 1 $FAILED)) $TOTAL tests" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Добавляем метрики производительности
          echo "### Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Average test duration: $(echo "scale=2; $total_duration/$TOTAL" | bc) seconds" >> $GITHUB_STEP_SUMMARY
          echo "Total suite duration: ${total_duration} seconds" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Store generated report
        uses: actions/upload-artifact@v3
        with:
          name: _site
          path: _site
          retention-days: 1

  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Report publication
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: _site
          path: _site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9

