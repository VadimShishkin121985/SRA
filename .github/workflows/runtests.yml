name: Automated tests

on:
  push:  # Оставляем запуск при push
  schedule:
    # Запуск в 7:00 по Киеву (UTC+2)
    # Указываем 5:00 UTC, что соответствует 7:00 по Киеву
    - cron: '0 5 * * *'

  workflow_dispatch:  # Добавляем возможность ручного запуска

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  download-history:
    # if: false
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Download artifacts
        run: >
          ARTIFACT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=allure-results" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$ARTIFACT_ID/zip 
          -o artifacts.zip &&
          REPORT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=github-pages" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$REPORT_ID/zip 
          -o pages.zip
      - name: Extract artifacts
        run: |
          mkdir -p allure-results pages_history
          unzip -q artifacts.zip -d allure-results || true
          unzip -q pages.zip -d pages_history || true
          if [ -f pages_history/artifact.tar ]; then
            tar -xf pages_history/artifact.tar -C pages_history
          fi
      - name: Copy history
        run: |
          if [ -d "pages_history/history" ]; then
            mkdir -p allure-results/history
            cp -r pages_history/history/* allure-results/history/ || true
          fi
      - name: Store allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 5

  test:
    needs: download-history
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: allure-results
        continue-on-error: true

      - name: Run tests
        id: run_tests
        run: |
          mkdir -p allure-results
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Если запуск по расписанию - только test_menu.py
            pytest tests/test_menu.py --reruns=1 --reruns-delay=3 --disable-warnings -v \
              --alluredir=allure-results \
              --junitxml=allure-results/junit.xml || true
          else
            # Для остальных случаев - все тесты
            pytest --reruns=1 --reruns-delay=3 --disable-warnings -v \
              --alluredir=allure-results \
              --junitxml=allure-results/junit.xml || true
          fi
          
          # Перезапуск упавших тестов
          if [ -f "allure-results/junit.xml" ]; then
            echo "Rerunning failed tests..."
            FAILED_TESTS=$(xmllint --xpath "//testcase[failure or error]/@name" "allure-results/junit.xml" 2>/dev/null | \
              sed -E 's/name="([^"]+)"/\1/g' | tr ' ' '\n' | sed 's/^/tests\/test_menu.py::/g')
            if [ ! -z "$FAILED_TESTS" ]; then
              echo "Failed tests to rerun: $FAILED_TESTS"
              echo "Waiting 30 seconds before rerun..."
              sleep 30  # Даем время на освобождение ресурсов
              
              # Убиваем все процессы Chrome перед перезапуском
              pkill chrome || true
              pkill chromedriver || true
              sleep 5
              
              # Запускаем каждый тест отдельно с паузой
              for test in $FAILED_TESTS; do
                echo "Rerunning test: $test"
                # Очищаем кэш браузера перед каждым тестом
                rm -rf /tmp/.com.google.Chrome* || true
                rm -rf /tmp/.org.chromium.Chromium* || true
                rm -rf ~/.cache/google-chrome || true
                
                pytest "$test" --disable-warnings -v \
                  --alluredir=allure-results/rerun \
                  --junitxml=allure-results/rerun_junit.xml || true
                sleep 5  # Пауза между тестами
                
                # Убиваем процессы после каждого теста
                pkill chrome || true
                pkill chromedriver || true
                sleep 2
              done
            fi
          fi
      - name: Store allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results
          retention-days: 1
          overwrite: true

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate report
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '17'

      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results
          merge-multiple: true

      - name: Generate Report
        run: |
          # Создаем директорию allure-results и копируем в нее все результаты
          mkdir -p allure-results
          mv *.json allure-results/ || true
          mv junit.xml allure-results/ || true
          
          echo "Contents of current directory after moving files:"
          ls -la
          echo "Contents of allure-results directory:"
          ls -la allure-results/
          
          # Копируем историю если она есть
          if [ -d "allure-results/history" ]; then
            cp -r allure-results/history/* allure-results/ || true
          fi
          
          # Генерируем отчет
          allure generate allure-results -o _site --clean
          
          # Сохраняем историю
          mkdir -p _site/history
          cp -r allure-results/history _site/history || true
          
          echo "Contents of generated _site directory:"
          ls -la _site/
      - name: Generate Test Summary
        run: |
          # Установка xmllint
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          # Отладочная информация
          echo "Listing contents of current directory:"
          ls -la
          echo "Listing contents of allure-results:"
          ls -la allure-results/
          
          # Проверяем и показываем содержимое junit.xml
          JUNIT_FILE="allure-results/junit.xml"  # Изменен путь
          if [ -f "$JUNIT_FILE" ]; then
            echo "Contents of junit.xml:"
            cat "$JUNIT_FILE"
          else
            echo "junit.xml not found in expected location"
          fi
          echo "# 🎯 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Statistics" >> $GITHUB_STEP_SUMMARY
          if [ -f "$JUNIT_FILE" ]; then
            # Подсчет результатов из junit-отчета pytest
            TOTAL=$(xmllint --xpath "count(//testcase)" "$JUNIT_FILE")
            FAILED=$(xmllint --xpath "count(//testcase[failure])" "$JUNIT_FILE" || echo "0")
            ERROR=$(xmllint --xpath "count(//testcase[error])" "$JUNIT_FILE" || echo "0")
            SKIPPED=$(xmllint --xpath "count(//testcase[skipped])" "$JUNIT_FILE" || echo "0")
            # Вычисляем количество успешных тестов
            FAILED=$((FAILED + ERROR))
            PASSED=$((TOTAL - FAILED - SKIPPED))
            # Подсчет процента успешных тестов
            if [ $TOTAL -gt 0 ]; then
              PASS_RATE=$(awk "BEGIN { printf \"%.2f\", ($PASSED/$TOTAL) * 100 }")
            else
              PASS_RATE=0
            fi
          else
            echo "Error: junit.xml not found at $JUNIT_FILE"
            TOTAL=0
            PASSED=0
            FAILED=0
            SKIPPED=0
            PASS_RATE=0
          fi
          # Вывод статистики
          echo "### Test Execution Trend" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Current Run Statistics:" >> $GITHUB_STEP_SUMMARY
          echo "📊 Total Tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "⏭️ Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "📈 Pass Rate: ${PASS_RATE}%" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          # Добавляем список упавших тестов только если они есть
          if [ $FAILED -gt 0 ] && [ -f "$JUNIT_FILE" ]; then
            echo "### ❌ Failed Tests:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            xmllint --xpath "//testcase[failure or error]/@name" "$JUNIT_FILE" 2>/dev/null | \
              sed -E 's/name="([^"]+)"/• \1/g' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          # Формируем сообщение для Telegram
          MESSAGE="📊 *Test Report Summary:*
          Total Tests: $TOTAL
          ✅ Passed: $PASSED
          ❌ Failed: $FAILED
          ⏭️ Skipped: $SKIPPED
          📈 Pass Rate: ${PASS_RATE}%
          🔗 [View Run Details](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
          # Отправляем сообщение в Telegram
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_SRA_ID}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_SRA_ID: ${{ secrets.TELEGRAM_CHAT_SRA_ID }}

      - name: Store generated report
        uses: actions/upload-artifact@v4
        with:
          name: _site-${{ github.run_id }}
          path: _site
          retention-days: 1
          overwrite: true

  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Report publication
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: _site-${{ github.run_id }}
          path: _site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4