name: Automated tests

on:
  push

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  download-history:
    # if: false
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download artifacts
        run: >
          ARTIFACT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=allure-results" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$ARTIFACT_ID/zip 
          -o artifacts.zip &&
          REPORT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=github-pages" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$REPORT_ID/zip 
          -o pages.zip

      - name: Extract artifacts
        run: |
          mkdir -p allure-results pages_history
          unzip -q artifacts.zip -d allure-results || true
          unzip -q pages.zip -d pages_history || true
          if [ -f pages_history/artifact.tar ]; then
            tar -xf pages_history/artifact.tar -C pages_history
          fi

      - name: Copy history
        run: |
          if [ -d "pages_history/history" ]; then
            mkdir -p allure-results/history
            cp -r pages_history/history/* allure-results/history/ || true
          fi

      - name: Store allure history
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 5

  test:
    needs: download-history
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable
        
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download history
        uses: actions/download-artifact@v3
        with:
          name: allure-history
          path: allure-results
        continue-on-error: true

      - name: Run tests
        run: |
          pytest --maxfail=3 --disable-warnings -v --alluredir=allure-results --junitxml=allure-results/junit.xml
        continue-on-error: true

      - name: Store allure results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 1


  generate-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Calculate Test Statistics
        run: |
          TOTAL=$(xmllint --xpath "count(//testcase)" allure-results/junit.xml)
          FAILED=$(xmllint --xpath "count(//testcase[failure])" allure-results/junit.xml || echo "0")
          ERROR=$(xmllint --xpath "count(//testcase[error])" allure-results/junit.xml || echo "0")
          SKIPPED=$(xmllint --xpath "count(//testcase[skipped])" allure-results/junit.xml || echo "0")
          PASSED=$((TOTAL - FAILED - ERROR - SKIPPED))
          PASS_RATE=$(awk "BEGIN { printf \"%.2f\", ($PASSED/$TOTAL) * 100 }")

          MESSAGE="üìä *Test Report Summary*:\n\n\
          Total Tests: $TOTAL\n\
          ‚úÖ Passed: $PASSED\n\
          ‚ùå Failed: $FAILED\n\
          ‚è≠Ô∏è Skipped: $SKIPPED\n\
          üìà Pass Rate: ${PASS_RATE}%"

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_SRA_ID}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_SRA_ID: ${{ secrets.TELEGRAM_CHAT_SRA_ID }}


  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Report publication
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: _site
          path: _site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9

