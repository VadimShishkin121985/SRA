name: Automated tests

on:
  push

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  download-history:
    # if: false
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download artifacts
        run: >
          ARTIFACT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=allure-results" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$ARTIFACT_ID/zip 
          -o artifacts.zip &&
          REPORT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts?name=github-pages" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/VadimShishkin121985/SRA/actions/artifacts/$REPORT_ID/zip 
          -o pages.zip

      - name: Extract artifacts
        run: |
          mkdir -p allure-results pages_history
          unzip -q artifacts.zip -d allure-results || true
          unzip -q pages.zip -d pages_history || true
          if [ -f pages_history/artifact.tar ]; then
            tar -xf pages_history/artifact.tar -C pages_history
          fi

      - name: Copy history
        run: |
          if [ -d "pages_history/history" ]; then
            mkdir -p allure-results/history
            cp -r pages_history/history/* allure-results/history/ || true
          fi

      - name: Store allure history
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 5

  test:
    needs: download-history
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable
        
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download history
        uses: actions/download-artifact@v3
        with:
          name: allure-history
          path: allure-results
        continue-on-error: true

      - name: Run tests
        run: |
          pytest --maxfail=3 --disable-warnings -v --alluredir=allure-results --junitxml=allure-results/junit.xml
        continue-on-error: true

      - name: Store allure results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 1

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate report
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft' # See 'Supported distributions' for available options
          java-version: '17'
      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Generate Report
        run: |
          cp -r allure-results/history/* allure-results/ || true
          allure generate allure-results -o _site --clean
          cp -r allure-results/history _site/history || true
      - name: Generate Test Summary
        run: |
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ xmllint
          sudo apt-get update && sudo apt-get install -y libxml2-utils

          echo "# üéØ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Statistics" >> $GITHUB_STEP_SUMMARY

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ XML —Ñ–∞–π–ª–∞
          echo "Checking for junit.xml file:"
          ls -l allure-results/junit.xml

          # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          echo "Content of junit.xml:"
          cat allure-results/junit.xml

          # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ junit-–æ—Ç—á–µ—Ç–∞ pytest
          TOTAL=$(xmllint --xpath "count(//testcase)" allure-results/junit.xml)
          FAILED=$(xmllint --xpath "count(//testcase[failure])" allure-results/junit.xml || echo "0")
          ERROR=$(xmllint --xpath "count(//testcase[error])" allure-results/junit.xml || echo "0")
          SKIPPED=$(xmllint --xpath "count(//testcase[skipped])" allure-results/junit.xml || echo "0")

          echo "Raw counts:"
          echo "TOTAL: $TOTAL"
          echo "FAILED: $FAILED"
          echo "ERROR: $ERROR"
          echo "SKIPPED: $SKIPPED"

          # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
          FAILED=$((FAILED + ERROR))
          PASSED=$((TOTAL - FAILED - SKIPPED))

          # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
          if [ $TOTAL -gt 0 ]; then
            PASS_RATE=$(awk "BEGIN { printf \"%.2f\", ($PASSED/$TOTAL) * 100 }")
          else
            PASS_RATE=0
          fi

          echo "### Test Execution Trend" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Current Run Statistics:" >> $GITHUB_STEP_SUMMARY
          echo "üìä Total Tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "‚è≠Ô∏è Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "üìà Pass Rate: ${PASS_RATE}%" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          MESSAGE="üìä *Test Report Summary:*

          Total Tests: $TOTAL
          ‚úÖ Passed: $PASSED
          ‚ùå Failed: $FAILED
          ‚è≠Ô∏è Skipped: $SKIPPED
          üìà Pass Rate: ${PASS_RATE}%

          üîó [View Run Details](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_SRA_ID}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

          # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤
          if [ $PASSED -gt 0 ]; then
            PASSED_LIST=$(grep -l '"status":"passed"' allure-results/*-result.json | xargs -I {} grep -h '"name":' {} | cut -d'"' -f4 | sed 's/^/‚Ä¢ /')
            PASSED_MSG="‚úÖ *Passed Tests:*\n$PASSED_LIST"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_SRA_ID}" \
              -d text="$PASSED_MSG" \
              -d parse_mode="Markdown"
          fi

          if [ $FAILED -gt 0 ]; then
            FAILED_LIST=$(grep -l '"status":"failed\|broken"' allure-results/*-result.json | xargs -I {} grep -h '"name":' {} | cut -d'"' -f4 | sed 's/^/‚Ä¢ /')
            FAILED_MSG="‚ùå *Failed Tests:*\n$FAILED_LIST"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_SRA_ID}" \
              -d text="$FAILED_MSG" \
              -d parse_mode="Markdown"
          fi

          if [ $SKIPPED -gt 0 ]; then
            SKIPPED_LIST=$(grep -l '"status":"skipped"' allure-results/*-result.json | xargs -I {} grep -h '"name":' {} | cut -d'"' -f4 | sed 's/^/‚Ä¢ /')
            SKIPPED_MSG="‚è≠Ô∏è *Skipped Tests:*\n$SKIPPED_LIST"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_SRA_ID}" \
              -d text="$SKIPPED_MSG" \
              -d parse_mode="Markdown"
          fi
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_SRA_ID: ${{ secrets.TELEGRAM_CHAT_SRA_ID }}

      - name: Store generated report
        uses: actions/upload-artifact@v3
        with:
          name: _site
          path: _site
          retention-days: 1


  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Report publication
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: _site
          path: _site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9

